{"version":3,"sources":["components/CocktailRecipe.tsx","components/RandomCocktail.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CocktailRecipe","name","glass","instructions","ingredientTable","ingredients","map","item","amount","instructionList","RandomCocktail","props","useState","setIngredients","useEffect","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAYaA,EAAwC,SAAC,GAK/C,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aAGQC,EADJ,EADJC,YAEsCC,KAAI,SAACC,GAAD,OACxC,+BACE,6BAAKA,EAAKN,OACV,6BAAKM,EAAKC,WAFHD,EAAKN,SAMVQ,EAAkBN,EAAaG,KAAI,SAACC,GAAD,OACvC,6BAAKA,OAIP,OACE,gCACE,6BAAKN,IACL,yCAAYC,KACZ,6CACA,gCAAQE,IACR,8CACA,6BAAKK,QC/BI,SAASC,EAAeC,GAAa,IAAD,EACzBC,mBAAiB,iBADQ,mBAC1CX,EAD0C,aAEvBW,mBAAiB,aAFM,mBAE1CV,EAF0C,aAGTU,mBAAwB,CAAC,SAAU,YAH1B,mBAG1CT,EAH0C,aAIXS,mBAA4B,KAJjB,mBAI1CP,EAJ0C,KAI7BQ,EAJ6B,KA8BjD,OAxBAC,qBAAU,WAIND,EAAe,CAHH,CAACZ,KAAM,MAAOO,OAAQ,QACpB,CAACP,KAAM,QAASO,OAAQ,QACzB,CAACP,KAAM,OAAQO,OAAQ,eAErC,CAACK,IAoBF,cAAC,EAAD,CACEZ,KAAMA,EACNC,MAAOA,EACPC,aAAcA,EACdE,YAAaA,IC3BJU,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACN,EAAD,SCMOO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6f43006e.chunk.js","sourcesContent":["export interface ingredient {\n  name: string;\n  amount: string;\n}\n\ninterface recipeProps {\n  name: string;\n  glass: string;\n  instructions: Array<string>;\n  ingredients: Array<ingredient>;\n}\n\nexport const CocktailRecipe: React.FC<recipeProps> = ({\n  name,\n  glass,\n  instructions,\n  ingredients,\n}) => {\n    const ingredientTable = ingredients.map((item) =>\n    <tr key={item.name}>\n      <td>{item.name}</td>\n      <td>{item.amount}</td>\n    </tr>\n  );\n\n  const instructionList = instructions.map((item) => \n    <li>{item}</li>\n  );\n\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <h2>Glass: {glass}</h2>\n      <h3>Ingredients</h3>\n      <table>{ingredientTable}</table>\n      <h3>Instructions</h3>\n      <ol>{instructionList}</ol>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { AxiosRequestConfig } from \"axios\";\nimport { CocktailRecipe, ingredient } from \"./CocktailRecipe\";\n\nexport default function RandomCocktail(props: any) {\n  const [name, setName] = useState<string>(\"Gin and Tonic\");\n  const [glass, setGlass] = useState<string>(\"Highball\");\n  const [instructions, setInstructions] = useState<Array<string>>(['step 1', 'step 2']);\n  const [ingredients, setIngredients] = useState<Array<ingredient>>([]);\n\n  useEffect(() => {\n      const gin = {name: 'gin', amount: '1 oz'}\n      const tonic = {name: 'tonic', amount: '2 oz'}\n      const lime = {name: 'lime', amount: '1 slice'}\n      setIngredients([gin, tonic, lime]);\n  }, [setIngredients])\n\n  /*useEffect(() => {\n        const options =        {\n            method: 'GET',\n            url: 'https://the-cocktail-db.p.rapidapi.com/random.php',\n            headers: {\n              'x-rapidapi-host': 'the-cocktail-db.p.rapidapi.com',\n              'x-rapidapi-key': 'INJECT THIS'\n            }\n          };\n\n        axios.request(options).then(function (response) {\n            console.log(response.data);\n        }).catch(function (error) {\n            console.error(error);\n        });\n    });*/\n\n  return (\n    <CocktailRecipe\n      name={name}\n      glass={glass}\n      instructions={instructions}\n      ingredients={ingredients}\n    />\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport RandomCocktail from './components/RandomCocktail'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <RandomCocktail />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}