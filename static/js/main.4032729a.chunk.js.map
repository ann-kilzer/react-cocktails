{"version":3,"sources":["components/CocktailRecipe.tsx","components/RandomCocktail.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CocktailRecipe","name","glass","instructions","ingredientTable","ingredients","map","item","amount","RandomCocktail","props","useState","setName","setGlass","setInstructions","setIngredients","useEffect","axios","request","method","url","headers","process","then","response","drink","data","drinks","console","log","strDrink","strGlass","strInstructions","Array","i","measure","push","catch","error","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAYaA,EAAwC,SAAC,GAK/C,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aAGMC,EADF,EADJC,YAEoCC,KAAI,SAACC,GAAD,OACtC,+BACE,6BAAKA,EAAKC,SACV,6BAAKD,EAAKN,SAFHM,EAAKN,SAMhB,OACE,gCACE,6BAAKA,IACL,yCAAYC,KACZ,6CACA,gCAAO,gCAAQE,MACf,8CACA,+BAAOD,QC1BE,SAASM,EAAeC,GAAa,IAAD,EACzBC,mBAAiB,IADQ,mBAC1CV,EAD0C,KACpCW,EADoC,OAEvBD,mBAAiB,IAFM,mBAE1CT,EAF0C,KAEnCW,EAFmC,OAGTF,mBAAiB,IAHR,mBAG1CR,EAH0C,KAG5BW,EAH4B,OAIXH,mBAA4B,IAJjB,mBAI1CN,EAJ0C,KAI7BU,EAJ6B,KA0CjD,OAnCAC,qBAAU,WAURC,IAAMC,QAT8B,CAClCC,OAAQ,MACRC,IAAK,oDACLC,QAAS,CACP,kBAAmBC,iCACnB,iBAAkBA,wDAICC,MAAK,SAAUC,GACpC,IAAMC,EAAQD,EAASE,KAAKC,OAAO,GACnCC,QAAQC,IAAIJ,GACZb,EAAQa,EAAMK,UACdjB,EAASY,EAAMM,UACfjB,EAAgBW,EAAMO,iBAEtB,IAAI3B,EAAc4B,QACdC,EAAW,EACf,IAAIA,EAAE,EAAGA,GArBK,GAqBSA,IAAK,CAC1B,IAAM3B,EAAOkB,EAAM,gBAAD,OAAiBS,IAC7BC,EAAUV,EAAM,aAAD,OAAcS,IACnC,IAAI3B,IAAQ4B,EAGV,MAFA9B,EAAY+B,KAAK,CAACnC,KAAMM,GAAQ,GAAIC,OAAQ2B,GAAW,KAK3DpB,EAAeV,MAEdgC,OAAM,SAAUC,GACjBV,QAAQU,MAAMA,QAEf,IAGD,cAAC,EAAD,CACErC,KAAMA,EACNC,MAAOA,EACPC,aAAcA,EACdE,YAAaA,ICvCJkC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC/B,EAAD,SCMOgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4032729a.chunk.js","sourcesContent":["export interface ingredient {\n  name: string;\n  amount: string;\n}\n\ninterface recipeProps {\n  name: string;\n  glass: string;\n  instructions: string;\n  ingredients: Array<ingredient>;\n}\n\nexport const CocktailRecipe: React.FC<recipeProps> = ({\n  name,\n  glass,\n  instructions,\n  ingredients,\n}) => {\n  const ingredientTable = ingredients.map((item) =>\n    <tr key={item.name}>\n      <td>{item.amount}</td>\n      <td>{item.name}</td>\n    </tr>\n  );\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <h2>Glass: {glass}</h2>\n      <h3>Ingredients</h3>\n      <table><tbody>{ingredientTable}</tbody></table>\n      <h3>Instructions</h3>\n      <span>{instructions}</span>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { AxiosRequestConfig } from \"axios\";\nimport { CocktailRecipe, ingredient } from \"./CocktailRecipe\";\n\nexport default function RandomCocktail(props: any) {\n  const [name, setName] = useState<string>(\"\");\n  const [glass, setGlass] = useState<string>(\"\");\n  const [instructions, setInstructions] = useState<string>(\"\");\n  const [ingredients, setIngredients] = useState<Array<ingredient>>([]);\n  const MAX_STEPS = 15;\n\n  useEffect(() => {\n    const options: AxiosRequestConfig = {\n      method: 'GET',\n      url: 'https://the-cocktail-db.p.rapidapi.com/random.php',\n      headers: {\n        'x-rapidapi-host': process.env.REACT_APP_RAPIDAPI_HOST || '',\n        'x-rapidapi-key': process.env.REACT_APP_RAPIDAPI_KEY || ''\n      }\n    };\n\n    axios.request(options).then(function (response) {\n      const drink = response.data.drinks[0];\n      console.log(drink);\n      setName(drink.strDrink);\n      setGlass(drink.strGlass);\n      setInstructions(drink.strInstructions);\n\n      let ingredients = Array<ingredient>();\n      let i:number = 1\n      for(i=1; i<=MAX_STEPS; i++) {\n        const item = drink[`strIngredient${i}`]\n        const measure = drink[`strMeasure${i}`]\n        if (item || measure) {\n          ingredients.push({name: item || '', amount: measure || ''})\n        } else {\n          break;\n        }\n      }\n      setIngredients(ingredients);\n\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }, []);\n\n  return (\n    <CocktailRecipe\n      name={name}\n      glass={glass}\n      instructions={instructions}\n      ingredients={ingredients}\n    />\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport RandomCocktail from './components/RandomCocktail'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <RandomCocktail />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}